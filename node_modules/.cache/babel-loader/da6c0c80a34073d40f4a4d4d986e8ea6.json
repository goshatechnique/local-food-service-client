{"remainingRequest":"/home/codex/local-food-service/client/node_modules/babel-loader/lib/index.js!/home/codex/local-food-service/client/node_modules/eslint-loader/index.js??ref--13-0!/home/codex/local-food-service/client/src/store/modules/user.js","dependencies":[{"path":"/home/codex/local-food-service/client/src/store/modules/user.js","mtime":1628242666933},{"path":"/home/codex/local-food-service/client/node_modules/cache-loader/dist/cjs.js","mtime":1628095767212},{"path":"/home/codex/local-food-service/client/node_modules/babel-loader/lib/index.js","mtime":1628095767080},{"path":"/home/codex/local-food-service/client/node_modules/eslint-loader/index.js","mtime":1628095768188}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2NvZGV4L2xvY2FsLWZvb2Qtc2VydmljZS9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IHNldFdpdGhFeHBpcnkgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2Nvb2tpZXMnOwppbXBvcnQgcmVxdWVzdHMgZnJvbSAnLi4vLi4vc2VydmljZXMvcmVxdWVzdHMnOwp2YXIgdXNlciA9IHsKICBzdGF0ZTogewogICAgY3VycmVudFVzZXI6IG51bGwKICB9LAogIG11dGF0aW9uczogewogICAgdXBkYXRlQ3VycmVudFVzZXI6IGZ1bmN0aW9uIHVwZGF0ZUN1cnJlbnRVc2VyKHN0YXRlLCB1c2VyKSB7CiAgICAgIHN0YXRlLmN1cnJlbnRVc2VyID0gdXNlcjsKICAgIH0sCiAgICBsb2dvdXQ6IGZ1bmN0aW9uIGxvZ291dChzdGF0ZSkgewogICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndG9rZW4nKTsKICAgICAgc3RhdGUuY3VycmVudFVzZXIgPSB7fTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIHJlZ2lzdHJhdGlvbjogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZ2lzdHJhdGlvbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmLCBuZXdVc2VyKSB7CiAgICAgICAgdmFyIGRpc3BhdGNoLCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0cy5yZWdpc3RyYXRpb24obmV3VXNlcik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMSkgZGlzcGF0Y2goJ2F1dGhvcml6YXRpb24nLCB7CiAgICAgICAgICAgICAgICAgIGVtYWlsOiBuZXdVc2VyLmVtYWlsLAogICAgICAgICAgICAgICAgICBwYXNzd29yZDogbmV3VXNlci5wYXNzd29yZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWdpc3RyYXRpb24oX3gsIF94MikgewogICAgICAgIHJldHVybiBfcmVnaXN0cmF0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZWdpc3RyYXRpb247CiAgICB9KCksCiAgICBhdXRob3JpemF0aW9uOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYXV0aG9yaXphdGlvbiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoX3JlZjIsIHVzZXJEYXRhKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgX3lpZWxkJHJlcXVlc3RzJGF1dGhvLCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RzLmF1dGhvcml6YXRpb24odXNlckRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfeWllbGQkcmVxdWVzdHMkYXV0aG8gPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkcmVxdWVzdHMkYXV0aG8uZGF0YTsKICAgICAgICAgICAgICAgIHNldFdpdGhFeHBpcnkoJ3Rva2VuJywgZGF0YS50b2tlbik7CiAgICAgICAgICAgICAgICBjb21taXQoJ3VwZGF0ZUN1cnJlbnRVc2VyJywgewogICAgICAgICAgICAgICAgICBpZDogZGF0YS51c2VyLl9pZCwKICAgICAgICAgICAgICAgICAgZW1haWw6IGRhdGEudXNlci5lbWFpbCwKICAgICAgICAgICAgICAgICAgY291bnRyeTogZGF0YS51c2VyLmNvdW50cnksCiAgICAgICAgICAgICAgICAgIGNpdHk6IGRhdGEudXNlci5jaXR5LAogICAgICAgICAgICAgICAgICBhY2NvdW50VHlwZTogZGF0YS51c2VyLmFjY291bnRUeXBlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYXV0aG9yaXphdGlvbihfeDMsIF94NCkgewogICAgICAgIHJldHVybiBfYXV0aG9yaXphdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYXV0aG9yaXphdGlvbjsKICAgIH0oKSwKICAgIGZldGNoQ3VycmVudFVzZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaEN1cnJlbnRVc2VyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhfcmVmMykgewogICAgICAgIHZhciBjb21taXQsIF95aWVsZCRyZXF1ZXN0cyRnZXRVcywgZGF0YTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0cy5nZXRVc2VyKCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF95aWVsZCRyZXF1ZXN0cyRnZXRVcyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRyZXF1ZXN0cyRnZXRVcy5kYXRhOwogICAgICAgICAgICAgICAgY29tbWl0KCd1cGRhdGVDdXJyZW50VXNlcicsIGRhdGEudXNlcik7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gOTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3VzZXIuanMgZmV0Y2hDdXJyZW50VXNlcigpIHwgRXJyb3I6ICcsIF9jb250ZXh0My50MCk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMSwgOV1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZmV0Y2hDdXJyZW50VXNlcihfeDUpIHsKICAgICAgICByZXR1cm4gX2ZldGNoQ3VycmVudFVzZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoQ3VycmVudFVzZXI7CiAgICB9KCkKICB9LAogIGdldHRlcnM6IHsKICAgIHVzZXI6IGZ1bmN0aW9uIHVzZXIoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmN1cnJlbnRVc2VyOwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgdXNlcjs="},{"version":3,"sources":["/home/codex/local-food-service/client/src/store/modules/user.js"],"names":["setWithExpiry","requests","user","state","currentUser","mutations","updateCurrentUser","logout","localStorage","removeItem","actions","registration","newUser","dispatch","response","status","email","password","authorization","userData","commit","data","token","id","_id","country","city","accountType","fetchCurrentUser","getUser","console","error","getters"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,uBAA9B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,IAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR,GADI;AAIXC,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBAAiB,EAAE,2BAAUH,KAAV,EAAiBD,IAAjB,EAAuB;AACxCC,MAAAA,KAAK,CAACC,WAAN,GAAoBF,IAApB;AACD,KAHQ;AAITK,IAAAA,MAAM,EAAE,gBAAUJ,KAAV,EAAiB;AACvBK,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAN,MAAAA,KAAK,CAACC,WAAN,GAAoB,EAApB;AACD;AAPQ,GAJA;AAaXM,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY;AAAA,kFAAE,uBAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,gBAAAA,QAAlB,QAAkBA,QAAlB;AAAA;AAAA,uBACWZ,QAAQ,CAACU,YAAT,CAAsBC,OAAtB,CADX;;AAAA;AACNE,gBAAAA,QADM;AAEZ,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EACEF,QAAQ,CAAC,eAAD,EAAkB;AACxBG,kBAAAA,KAAK,EAAEJ,OAAO,CAACI,KADS;AAExBC,kBAAAA,QAAQ,EAAEL,OAAO,CAACK;AAFM,iBAAlB,CAAR;;AAHU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADL;AASPC,IAAAA,aAAa;AAAA,mFAAE,yBAA4BC,QAA5B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkBC,gBAAAA,MAAlB,SAAkBA,MAAlB;AAAA;AAAA,uBACUnB,QAAQ,CAACiB,aAAT,CAAuBC,QAAvB,CADV;;AAAA;AAAA;AACLE,gBAAAA,IADK,yBACLA,IADK;AAEbrB,gBAAAA,aAAa,CAAC,OAAD,EAAUqB,IAAI,CAACC,KAAf,CAAb;AACAF,gBAAAA,MAAM,CAAC,mBAAD,EAAsB;AAC1BG,kBAAAA,EAAE,EAAEF,IAAI,CAACnB,IAAL,CAAUsB,GADY;AAE1BR,kBAAAA,KAAK,EAAEK,IAAI,CAACnB,IAAL,CAAUc,KAFS;AAG1BS,kBAAAA,OAAO,EAAEJ,IAAI,CAACnB,IAAL,CAAUuB,OAHO;AAI1BC,kBAAAA,IAAI,EAAEL,IAAI,CAACnB,IAAL,CAAUwB,IAJU;AAK1BC,kBAAAA,WAAW,EAAEN,IAAI,CAACnB,IAAL,CAAUyB;AALG,iBAAtB,CAAN;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OATN;AAoBPC,IAAAA,gBAAgB;AAAA,sFAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkBR,gBAAAA,MAAlB,SAAkBA,MAAlB;AAAA;AAAA;AAAA,uBAESnB,QAAQ,CAAC4B,OAAT,EAFT;;AAAA;AAAA;AAENR,gBAAAA,IAFM,yBAENA,IAFM;AAGdD,gBAAAA,MAAM,CAAC,mBAAD,EAAsBC,IAAI,CAACnB,IAA3B,CAAN;AAHc;AAAA;;AAAA;AAAA;AAAA;AAKd4B,gBAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd;;AALc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AApBT,GAbE;AA0CXC,EAAAA,OAAO,EAAE;AACP9B,IAAAA,IAAI,EAAE,cAACC,KAAD;AAAA,aAAWA,KAAK,CAACC,WAAjB;AAAA;AADC;AA1CE,CAAb;AA+CA,eAAeF,IAAf","sourcesContent":["import { setWithExpiry } from '../../helpers/cookies';\nimport requests from '../../services/requests';\n\nconst user = {\n  state: {\n    currentUser: null,\n  },\n  mutations: {\n    updateCurrentUser: function (state, user) {\n      state.currentUser = user;\n    },\n    logout: function (state) {\n      localStorage.removeItem('token');\n      state.currentUser = {};\n    },\n  },\n  actions: {\n    registration: async function ({ dispatch }, newUser) {\n      const response = await requests.registration(newUser);\n      if (response.status === 201)\n        dispatch('authorization', {\n          email: newUser.email,\n          password: newUser.password,\n        });\n    },\n    authorization: async function ({ commit }, userData) {\n      const { data } = await requests.authorization(userData);\n      setWithExpiry('token', data.token);\n      commit('updateCurrentUser', {\n        id: data.user._id,\n        email: data.user.email,\n        country: data.user.country,\n        city: data.user.city,\n        accountType: data.user.accountType,\n      });\n    },\n    fetchCurrentUser: async function ({ commit }) {\n      try {\n        const { data } = await requests.getUser();\n        commit('updateCurrentUser', data.user);\n      } catch (error) {\n        console.error('user.js fetchCurrentUser() | Error: ', error);\n      }\n    },\n  },\n  getters: {\n    user: (state) => state.currentUser,\n  },\n};\n\nexport default user;\n"]}]}