{"remainingRequest":"/home/codex/client/node_modules/babel-loader/lib/index.js!/home/codex/client/node_modules/eslint-loader/index.js??ref--13-0!/home/codex/client/src/store/modules/products.js","dependencies":[{"path":"/home/codex/client/src/store/modules/products.js","mtime":1628673136672},{"path":"/home/codex/client/node_modules/cache-loader/dist/cjs.js","mtime":1628673132188},{"path":"/home/codex/client/node_modules/babel-loader/lib/index.js","mtime":1628673131760},{"path":"/home/codex/client/node_modules/eslint-loader/index.js","mtime":1628673133396}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2NvZGV4L2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHJlcXVlc3RzIGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcXVlc3RzJzsKdmFyIHByb2R1Y3RzID0gewogIHN0YXRlOiB7CiAgICBwcm9kdWN0c0xpc3Q6IFtdCiAgfSwKICBtdXRhdGlvbnM6IHsKICAgIHVwZGF0ZVByb2R1Y3RzTGlzdDogZnVuY3Rpb24gdXBkYXRlUHJvZHVjdHNMaXN0KHN0YXRlLCBwcm9kdWN0cykgewogICAgICBzdGF0ZS5wcm9kdWN0c0xpc3QgPSBwcm9kdWN0czsKICAgIH0sCiAgICBhZGRQcm9kdWN0TWFudWFsOiBmdW5jdGlvbiBhZGRQcm9kdWN0TWFudWFsKHN0YXRlLCBuZXdQcm9kdWN0KSB7CiAgICAgIHN0YXRlLnByb2R1Y3RzTGlzdC5wdXNoKG5ld1Byb2R1Y3QpOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgcG9zdFByb2R1Y3Q6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9wb3N0UHJvZHVjdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShfcmVmLCBuZXdQcm9kdWN0KSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcmVzcG9uc2U7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RzLnBvc3RQcm9kdWN0KG5ld1Byb2R1Y3QpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIGNvbW1pdCgnYWRkUHJvZHVjdE1hbnVhbCcsIG5ld1Byb2R1Y3QpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA4OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3Byb2R1Y3RzLmpzIHBvc3RQcm9kdWN0KCkgfCBFcnJvcjogJywgX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1sxLCA4XV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBwb3N0UHJvZHVjdChfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9wb3N0UHJvZHVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcG9zdFByb2R1Y3Q7CiAgICB9KCksCiAgICBmZXRjaFByb2R1Y3RzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmV0Y2hQcm9kdWN0cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoX3JlZjIsIHBhcmFtcykgewogICAgICAgIHZhciBjb21taXQsIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdHMuZ2V0UHJvZHVjdHMocGFyYW1zKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbW1pdCgndXBkYXRlUHJvZHVjdHNMaXN0JywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoUHJvZHVjdHMoX3gzLCBfeDQpIHsKICAgICAgICByZXR1cm4gX2ZldGNoUHJvZHVjdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoUHJvZHVjdHM7CiAgICB9KCkKICB9LAogIGdldHRlcnM6IHsKICAgIHByb2R1Y3RzTGlzdDogZnVuY3Rpb24gcHJvZHVjdHNMaXN0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5wcm9kdWN0c0xpc3Q7CiAgICB9CiAgfQp9OwpleHBvcnQgZGVmYXVsdCBwcm9kdWN0czs="},{"version":3,"sources":["/home/codex/client/src/store/modules/products.js"],"names":["requests","products","state","productsList","mutations","updateProductsList","addProductManual","newProduct","push","actions","postProduct","commit","response","status","console","error","fetchProducts","params","getProducts","data","getters"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE;AADT,GADQ;AAIfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,kBAAkB,EAAE,4BAAUH,KAAV,EAAiBD,QAAjB,EAA2B;AAC7CC,MAAAA,KAAK,CAACC,YAAN,GAAqBF,QAArB;AACD,KAHQ;AAITK,IAAAA,gBAAgB,EAAE,0BAAUJ,KAAV,EAAiBK,UAAjB,EAA6B;AAC7CL,MAAAA,KAAK,CAACC,YAAN,CAAmBK,IAAnB,CAAwBD,UAAxB;AACD;AANQ,GAJI;AAYfE,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW;AAAA,iFAAE,uBAA4BH,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBI,gBAAAA,MAAlB,QAAkBA,MAAlB;AAAA;AAAA;AAAA,uBAEcX,QAAQ,CAACU,WAAT,CAAqBH,UAArB,CAFd;;AAAA;AAEHK,gBAAAA,QAFG;AAGT,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6BF,MAAM,CAAC,kBAAD,EAAqBJ,UAArB,CAAN;AAHpB;AAAA;;AAAA;AAAA;AAAA;AAKTO,gBAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;;AALS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADJ;AASPC,IAAAA,aAAa;AAAA,mFAAE,yBAA4BC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBN,gBAAAA,MAAlB,SAAkBA,MAAlB;AAAA;AAAA,uBACUX,QAAQ,CAACkB,WAAT,CAAqBD,MAArB,CADV;;AAAA;AACPL,gBAAAA,QADO;AAEbD,gBAAAA,MAAM,CAAC,oBAAD,EAAuBC,QAAQ,CAACO,IAAhC,CAAN;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AATN,GAZM;AA0BfC,EAAAA,OAAO,EAAE;AACPjB,IAAAA,YAAY,EAAE,sBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,YAAV;AAAA;AADZ;AA1BM,CAAjB;AA+BA,eAAeF,QAAf","sourcesContent":["import requests from '../../services/requests';\n\nconst products = {\n  state: {\n    productsList: [],\n  },\n  mutations: {\n    updateProductsList: function (state, products) {\n      state.productsList = products;\n    },\n    addProductManual: function (state, newProduct) {\n      state.productsList.push(newProduct);\n    },\n  },\n  actions: {\n    postProduct: async function ({ commit }, newProduct) {\n      try {\n        const response = await requests.postProduct(newProduct);\n        if (response.status === 201) commit('addProductManual', newProduct);\n      } catch (error) {\n        console.error('products.js postProduct() | Error: ', error);\n      }\n    },\n    fetchProducts: async function ({ commit }, params) {\n      const response = await requests.getProducts(params);\n      commit('updateProductsList', response.data);\n    },\n  },\n  getters: {\n    productsList: state => state.productsList,\n  },\n};\n\nexport default products;\n"]}]}