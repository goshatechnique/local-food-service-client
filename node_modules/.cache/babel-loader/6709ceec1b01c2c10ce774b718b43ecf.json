{"remainingRequest":"/home/codex/local-food-service/client/node_modules/babel-loader/lib/index.js!/home/codex/local-food-service/client/node_modules/eslint-loader/index.js??ref--13-0!/home/codex/local-food-service/client/src/store/modules/products.js","dependencies":[{"path":"/home/codex/local-food-service/client/src/store/modules/products.js","mtime":1628698294546},{"path":"/home/codex/local-food-service/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/codex/local-food-service/client/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/codex/local-food-service/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2NvZGV4L2xvY2FsLWZvb2Qtc2VydmljZS9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCByZXF1ZXN0cyBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZXF1ZXN0cyc7CnZhciBwcm9kdWN0cyA9IHsKICBzdGF0ZTogewogICAgcHJvZHVjdHNMaXN0OiBbXQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICB1cGRhdGVQcm9kdWN0c0xpc3Q6IGZ1bmN0aW9uIHVwZGF0ZVByb2R1Y3RzTGlzdChzdGF0ZSwgcHJvZHVjdHMpIHsKICAgICAgc3RhdGUucHJvZHVjdHNMaXN0ID0gcHJvZHVjdHM7CiAgICB9LAogICAgYWRkUHJvZHVjdE1hbnVhbDogZnVuY3Rpb24gYWRkUHJvZHVjdE1hbnVhbChzdGF0ZSwgbmV3UHJvZHVjdCkgewogICAgICBzdGF0ZS5wcm9kdWN0c0xpc3QucHVzaChuZXdQcm9kdWN0KTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIHBvc3RQcm9kdWN0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcG9zdFByb2R1Y3QgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZiwgbmV3UHJvZHVjdCkgewogICAgICAgIHZhciBjb21taXQsIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0cy5wb3N0UHJvZHVjdChuZXdQcm9kdWN0KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSBjb21taXQoJ2FkZFByb2R1Y3RNYW51YWwnLCBuZXdQcm9kdWN0KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdwcm9kdWN0cy5qcyBwb3N0UHJvZHVjdCgpIHwgRXJyb3I6ICcsIF9jb250ZXh0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMSwgOF1dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcG9zdFByb2R1Y3QoX3gsIF94MikgewogICAgICAgIHJldHVybiBfcG9zdFByb2R1Y3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvc3RQcm9kdWN0OwogICAgfSgpLAogICAgZmV0Y2hQcm9kdWN0czogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoUHJvZHVjdHMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKF9yZWYyLCBwYXJhbXMpIHsKICAgICAgICB2YXIgY29tbWl0LCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RzLmdldFByb2R1Y3RzKHBhcmFtcyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb21taXQoJ3VwZGF0ZVByb2R1Y3RzTGlzdCcsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaFByb2R1Y3RzKF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaFByb2R1Y3RzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaFByb2R1Y3RzOwogICAgfSgpCiAgfSwKICBnZXR0ZXJzOiB7CiAgICBwcm9kdWN0c0xpc3Q6IGZ1bmN0aW9uIHByb2R1Y3RzTGlzdChzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUucHJvZHVjdHNMaXN0OwogICAgfQogIH0KfTsKZXhwb3J0IGRlZmF1bHQgcHJvZHVjdHM7"},{"version":3,"sources":["/home/codex/local-food-service/client/src/store/modules/products.js"],"names":["requests","products","state","productsList","mutations","updateProductsList","addProductManual","newProduct","push","actions","postProduct","commit","response","status","console","error","fetchProducts","params","getProducts","data","getters"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,yBAArB;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE;AADT,GADQ;AAIfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,kBAAkB,EAAE,4BAAUH,KAAV,EAAiBD,QAAjB,EAA2B;AAC7CC,MAAAA,KAAK,CAACC,YAAN,GAAqBF,QAArB;AACD,KAHQ;AAITK,IAAAA,gBAAgB,EAAE,0BAAUJ,KAAV,EAAiBK,UAAjB,EAA6B;AAC7CL,MAAAA,KAAK,CAACC,YAAN,CAAmBK,IAAnB,CAAwBD,UAAxB;AACD;AANQ,GAJI;AAYfE,EAAAA,OAAO,EAAE;AACPC,IAAAA,WAAW;AAAA,iFAAE,uBAA4BH,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBI,gBAAAA,MAAlB,QAAkBA,MAAlB;AAAA;AAAA;AAAA,uBAEcX,QAAQ,CAACU,WAAT,CAAqBH,UAArB,CAFd;;AAAA;AAEHK,gBAAAA,QAFG;AAGT,oBAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6BF,MAAM,CAAC,kBAAD,EAAqBJ,UAArB,CAAN;AAHpB;AAAA;;AAAA;AAAA;AAAA;AAKTO,gBAAAA,OAAO,CAACC,KAAR,CAAc,qCAAd;;AALS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADJ;AASPC,IAAAA,aAAa;AAAA,mFAAE,yBAA4BC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBN,gBAAAA,MAAlB,SAAkBA,MAAlB;AAAA;AAAA,uBACUX,QAAQ,CAACkB,WAAT,CAAqBD,MAArB,CADV;;AAAA;AACPL,gBAAAA,QADO;AAEbD,gBAAAA,MAAM,CAAC,oBAAD,EAAuBC,QAAQ,CAACO,IAAhC,CAAN;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AATN,GAZM;AA0BfC,EAAAA,OAAO,EAAE;AACPjB,IAAAA,YAAY,EAAE,sBAAAD,KAAK;AAAA,aAAIA,KAAK,CAACC,YAAV;AAAA;AADZ;AA1BM,CAAjB;AA+BA,eAAeF,QAAf","sourcesContent":["import requests from '../../services/requests';\n\nconst products = {\n  state: {\n    productsList: [],\n  },\n  mutations: {\n    updateProductsList: function (state, products) {\n      state.productsList = products;\n    },\n    addProductManual: function (state, newProduct) {\n      state.productsList.push(newProduct);\n    },\n  },\n  actions: {\n    postProduct: async function ({ commit }, newProduct) {\n      try {\n        const response = await requests.postProduct(newProduct);\n        if (response.status === 201) commit('addProductManual', newProduct);\n      } catch (error) {\n        console.error('products.js postProduct() | Error: ', error);\n      }\n    },\n    fetchProducts: async function ({ commit }, params) {\n      const response = await requests.getProducts(params);\n      commit('updateProductsList', response.data);\n    },\n  },\n  getters: {\n    productsList: state => state.productsList,\n  },\n};\n\nexport default products;\n"]}]}