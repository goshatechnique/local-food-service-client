{"remainingRequest":"/home/codex/local-food-service/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/codex/local-food-service/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/codex/local-food-service/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/codex/local-food-service/client/src/components/LoginForm.vue?vue&type=template&id=8dac4566&scoped=true&","dependencies":[{"path":"/home/codex/local-food-service/client/src/components/LoginForm.vue","mtime":1628698909723},{"path":"/home/codex/local-food-service/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/codex/local-food-service/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/codex/local-food-service/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/codex/local-food-service/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}